DROP DATABASE IF EXISTS [ORDER]
GO
CREATE DATABASE [ORDER]
GO
CREATE TABLE ORDERS
(
ORDER_ID INT,
ORDER_DATE DATE,
AMOUNT INT,
CUSTOMER_ID INT
)
GO
--INSERTING VALUES
INSERT INTO ORDERS VALUES
(1,'2023/01/25',56000,1),
(2,'2023/02/23',36223,3),
(3,'2023/03/12',23678,5),
(4,'2023/04/13',26373,7),
(5,'2023/05/14',23672,8)
GO
SELECT * FROM ORDERS
GO

--1. USE THE INBUILT FUNCTIONS AND FIND THE MINIMUM, MAXIMUMAND AVERAGEAMOUNT FROM THE ORDERS TABLE
SELECT
 MIN(AMOUNT) AS MINIMUM_AMOUNT,
 MAX(AMOUNT) AS MAXIMUM_AMOUNT,
 AVG(AMOUNT) AS AVERAGE_AMOUNT
FROM
 ORDERS;
--2. CREATE A USER-DEFINED FUNCTION WHICH WILL MULTIPLY THE GIVEN NUMBER WITH 10
CREATE FUNCTION MULTIPLYBY10(@NUMBER AS INT)
RETURNS INT
AS
BEGIN
 DECLARE @RESULT INT
 
 SET @RESULT = @NUMBER * 10
 
 RETURN @RESULT
END;
--3. USE THE CASE STATEMENT TO CHECK IF 100 IS LESS THAN 200, GREATER THAN200OR EQUAL TO 200 AND PRINT THE CORRESPONDING VALUE.
SELECT
 CASE
 WHEN 100 < 200 THEN 'LESS THAN 200'
 WHEN 100 > 200 THEN 'GREATER THAN 200'
 WHEN 100 = 200 THEN 'EQUAL TO 200'
 END AS COMPARISON_RESULT;
--4. USING A CASE STATEMENT, FIND THE STATUS OF THE AMOUNT. SET THE STATUSOF THEAMOUNT AS HIGH AMOUNT, LOW AMOUNT OR MEDIUM AMOUNT BASED UPONTHECONDITION. 
SELECT
 AMOUNT,
 CASE
 WHEN AMOUNT > 1000 THEN 'HIGH AMOUNT'
 WHEN AMOUNT < 500 THEN 'LOW AMOUNT'
 ELSE 'MEDIUM AMOUNT'
 END AS AMOUNT_STATUS
FROM
 orders;
--5. CREATE A USER-DEFINED FUNCTION, TO FETCH THE AMOUNT GREATER THANTHENGIVENINPUT.
CREATE FUNCTION GETAMOUNTSGREATERTHAN(@INPUT_AMOUNT INT)
RETURNS TABLE
AS
RETURN (
 SELECT AMOUNT
 FROM ORDERS
 WHERE AMOUNT > @INPUT_AMOUNT)