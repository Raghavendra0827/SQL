DROP DATABASE IF EXISTS CASE_STUDY
GO
CREATE DATABASE CASE_STUDY
GO
USE CASE_STUDY
GO

--NOTE: "HERE I IMPORTED THE DATA FROM CSV FILE TO MS SQL DATABASE"


--1. DISPLAY THE NUMBER OF STATES PRESENT IN THE LOCATIONTABLE. 
SELECT COUNT(STATE) FROM LOCATION
--2. HOW MANY PRODUCTS ARE OF REGULAR TYPE?
SELECT COUNT(TYPE) FROM PRODUCT WHERE TYPE='REGULAR'
--3. HOW MUCH SPENDING HAS BEEN DONE ON MARKETING OF PRODUCT ID 1?
SELECT SUM(MARKETING) FROM FACT WHERE PRODUCTID=1
--4. WHAT IS THE MINIMUM SALES OF A PRODUCT?
SELECT MIN(SALES) FROM FACT
--5. DISPLAY THE MAX COST OF GOOD SOLD (COGS).
SELECT MIN(COGS) FROM FACT
--6. DISPLAY THE DETAILS OF THE PRODUCT WHERE PRODUCT TYPE IS COFFEE.
SELECT * FROM PRODUCT WHERE PRODUCT_TYPE='COFFEE'
--7. DISPLAY THE DETAILS WHERE TOTAL EXPENSES ARE GREATER THAN 40.
SELECT * FROM FACT WHERE [TOTAL_EXPENSES]>40
--8. WHAT IS THE AVERAGE SALES IN AREA CODE 719?
SELECT AVG(SALES) FROM FACT WHERE AREA_CODE=719
--9. FIND OUT THE TOTAL PROFIT GENERATED BY COLORADO STATE.
SELECT SUM(BUDGET_PROFIT) FROM FACT AS F JOIN LOCATION AS L ON F.AREA_CODE=L.AREA_CODE WHERE L.STATE='COLORADO'
--10. DISPLAY THE AVERAGE INVENTORY FOR EACH PRODUCT ID. 
SELECT PRODUCTID,AVG(INVENTORY) FROM FACT GROUP BY PRODUCTID ORDER BY PRODUCTID
--11. DISPLAY STATE IN A SEQUENTIAL ORDER IN A LOCATION TABLE. 
SELECT STATE FROM LOCATION GROUP BY STATE ORDER BY STATE
--12. DISPLAY THE AVERAGE BUDGET OF THE PRODUCT WHERE THE AVERAGE BUDGETMARGIN SHOULD BE GREATER THAN 100.
SELECT AVG(BUDGET_PROFIT) FROM FACT WHERE BUDGET_MARGIN>100
--13. WHAT IS THE TOTAL SALES DONE ON DATE 2010-01-01?
SELECT SUM(SALES) FROM FACT WHERE DATE='2010-01-01'
--14. DISPLAY THE AVERAGE TOTAL EXPENSE OF EACH PRODUCT ID ON AN INDIVIDUAL DATE.
SELECT DATE,PRODUCTID,AVG(TOTAL_EXPENSES) FROM FACT GROUP BY DATE,PRODUCTID ORDER BY DATE
--15. DISPLAY THE TABLE WITH THE FOLLOWING ATTRIBUTES SUCH AS DATE, PRODUCTID, PRODUCT_TYPE, PRODUCT, SALES, PROFIT, STATE, AREA_CODE. 
SELECT DATE, F.PRODUCTID, P.PRODUCT_TYPE, P.PRODUCT, F.SALES, F.PROFIT, L.STATE, F.AREA_CODE FROM FACT AS F JOIN PRODUCT AS P ON F.PRODUCTID=P.PRODUCTID JOIN LOCATION AS L ON L.AREA_CODE=F.AREA_CODE ORDER BY F.PRODUCTID
--16. DISPLAY THE RANK WITHOUT ANY GAP TO SHOW THE SALES WISE RANK. 
SELECT SALES,RANK() OVER (ORDER BY SALES) FROM FACT
--17. FIND THE STATE WISE PROFIT AND SALES. 
SELECT L.STATE,SUM(FACT.BUDGET_PROFIT),SUM(FACT.SALES) FROM FACT JOIN LOCATION AS L ON L.AREA_CODE=FACT.AREA_CODE GROUP BY L.STATE
--18. FIND THE STATE WISE PROFIT AND SALES ALONG WITH THE PRODUCTNAME. 
SELECT L.STATE,P.PRODUCT,SUM(FACT.BUDGET_PROFIT),SUM(FACT.SALES) FROM FACT JOIN LOCATION AS L ON L.AREA_CODE=FACT.AREA_CODE JOIN PRODUCT AS P ON P.PRODUCTID=FACT.PRODUCTID GROUP BY L.STATE,P.PRODUCT
--19. IF THERE IS AN INCREASE IN SALES OF 5%, CALCULATE THE INCREASEDSALES. 
SELECT PRODUCTID,PROFIT=((BUDGET_SALES-SALES)*100)/SALES FROM FACT WHERE ((BUDGET_SALES-SALES)*100)/SALES>5 ORDER BY PRODUCTID
--20. FIND THE MAXIMUM PROFIT ALONG WITH THE PRODUCT ID AND PRODUCTTYPE. 
SELECT P.PRODUCTID,P.PRODUCT_TYPE FROM FACT AS F JOIN PRODUCT AS P ON P.PRODUCTID=F.PRODUCTID WHERE F.PROFIT=(SELECT MAX(PROFIT) FROM FACT)
--21. CREATE A STORED PROCEDURE TO FETCH THE RESULT ACCORDING TO THE PRODUCT TYPEFROM PRODUCT TABLE. 
CREATE PROCEDURE PRODUCT_TYPE @TYPE AS VARCHAR(20)
AS 
SELECT * FROM PRODUCT WHERE TYPE=@TYPE
		--EXAMPLE		
		EXEC DBO.PRODUCT_TYPE @TYPE='DECAF'
--22. WRITE A QUERY BY CREATING A CONDITION IN WHICH IF THE TOTAL EXPENSES IS LESS THAN60 THEN IT IS A PROFIT OR ELSE LOSS. 
SELECT *,[PROFIT/LOSS]=IIF(PROFIT>60,'PROFIT','LOSS') FROM FACT
--23. GIVE THE TOTAL WEEKLY SALES VALUE WITH THE DATE AND PRODUCT ID DETAILS. USEROLL-UP TO PULL THE DATA IN HIERARCHICAL ORDER. 
SELECT DATEPART(WEEK, DATE) AS WEEKNUMBER, PRODUCTID, SUM(SALES) AS TOTALSALES
FROM FACT
GROUP BY ROLLUP(DATEPART(WEEK,DATE), PRODUCTID)
ORDER BY WEEKNUMBER, PRODUCTID;

--24. APPLY UNION AND INTERSECTION OPERATOR ON THE TABLES WHICH CONSIST OF ATTRIBUTE AREA CODE. 
-- UNION OPERATOR
SELECT AREA_CODE FROM FACT
UNION
SELECT AREA_CODE FROM LOCATION

-- INTERSECTION OPERATOR
SELECT AREA_CODE FROM FACT
INTERSECT
SELECT AREA_CODE FROM LOCATION
--25. CREATE A USER-DEFINED FUNCTION FOR THE PRODUCT TABLE TO FETCH A PARTICULAR PRODUCT TYPE BASED UPON THE USER’S PREFERENCE.
CREATE FUNCTION PRODUCT_TYPES(@TYPE AS VARCHAR(20))
RETURNS TABLE
AS
RETURN(SELECT * FROM PRODUCT WHERE TYPE=@TYPE)
SELECT * FROM DBO.PRODUCT_TYPES('REGULAR')
--26. CHANGE THE PRODUCT TYPE FROM COFFEE TO TEA WHERE PRODUCT ID IS 1 AND UNDOIT.
BEGIN
BEGIN TRANSACTION
UPDATE PRODUCT SET PRODUCT_TYPE='TEA' WHERE PRODUCT_TYPE='COFFEE'
PRINT 'TABLE I UPDATED'
ROLLBACK TRANSACTION
PRINT 'CHANGES ARE UNDO'
END
--27. DISPLAY THE DATE, PRODUCT ID AND SALES WHERE TOTAL EXPENSES ARE BETWEEN 100 TO 200. 
SELECT DATE,PRODUCTID,SALES FROM FACT WHERE TOTAL_EXPENSES BETWEEN 100 AND 200 ORDER BY PRODUCTID
--28. DELETE THE RECORDS IN THE PRODUCT TABLE FOR REGULAR TYPE. 
DELETE FROM PRODUCT WHERE TYPE='REGULAR'
--29. DISPLAY THE ASCII VALUE OF THE FIFTH CHARACTER FROM THE COLUMNPRODUCT.
SELECT ASCII(SUBSTRING(PRODUCT, 5, 1)) AS ASCII_VALUE
FROM PRODUCT;

