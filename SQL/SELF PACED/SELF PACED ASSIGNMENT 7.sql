DROP DATABASE IF EXISTS LARGE
GO
CREATE DATABASE LARGE
GO
USE LARGE
GO
CREATE TABLE SOFTWARE(
[NAME] VARCHAR(20),
TITLE VARCHAR(20),
DEVELOPMENTLANGUAGE VARCHAR(20),
SELLINGCOST INT,
DCOST INT,
COPIESSOLD INT
)
GO
CREATE TABLE STUDIES(
NAME VARCHAR(20),
INSTITUTE VARCHAR(20),
COURSE VARCHAR(20),
[COURSEFEE] INT
)
GO
CREATE TABLE PROGRAMMER(
NAME VARCHAR(20),
DATEOFBIRTH DATE,
DATEOFJOIN DATE,
AGE INT,
GENDER VARCHAR(10),
PROFESSION1 VARCHAR(20),
PROFESSION2 VARCHAR(20),
SALARY INT
)
GO
INSERT INTO SOFTWARE VALUES('MARY','README','CPP',300,1200,84),
('ANAND','PARACHUTES','BASIC',399.95,6000,43),
('ANAND','VIDEO TITLING','PASCAL',7500,16000,9),
('JULIANA','INVENTORY','COBOL',3000,3500,0),
('KAMALA','PAYROLL PKG.','DBASE',9000,20000,7),
('MARY','FINANCIAL ACCT.','ORACLE',18000,85000,4),
('MARY','CODE GENERATOR','C',4500,20000,23),
('PATTRICK','README','CPP',300,1200,84),
('QADIR','BOMBS AWAY','ASSEMBLY',750,3000,11),
('QADIR','VACCINES','C',1900,3100,21),
('RAMESH','HOTEL MGMT.','DBASE',13000,35000,4),
('RAMESH','DEAD LEE','PASCAL',599.95,4500,73),
('REMITHA','PC UTILITIES','C',725,5000,51),
('REMITHA','TSR HELP PKG.','ASSEMBLY',2500,6000,7),
('SREVATHI','HOSPITAL MGMT.','PASCAL',1100,75000,2),
('VIJAYA','TSR EDITOR','C',900,700,6)
GO
INSERT INTO PROGRAMMER VALUES
('ANAND','12-APR-1966','21-APR-1992',28,'M','PASCAL','BASIC',3200),
('ALTAF','02-JUL-1964','13-NOV-1990',30,'M','CLIPPER','COBAL',2800),
('JULIANA','31-JAN-1960','21-APR-1990',26,'F','COBAL','DBASE',3000),
('KAMALA','30-OCT-1968','02-JAN-1992',32,'F','C','DBASE',2900),
('MARY','24-JUN-1970','01-FEB-1991',35 ,'F','CPP','ORACLE',4500),
('NEKSON','11-SEP-1985','11-OCT-1989',28,'M','COBAL','DBASE',2500),
('PATTRICK','10-NOV-1965','21-APR-1990',28,'M','PASCAL','CLIPPER',2800),
('QADIR','31-AUG-19565','21-APR-1991', 30,'M','ASSEMBLY','C',3000),
('RAMESH','03-MAY-1967','28-FEB-1991', 36,'M','PASCAL','DBASE',3200),
('REVECCA','01-JAN-1967','01-DEC-1990',33 ,'F','BASIC','COBAL',2500),
('REMITHA','19-APR-1970','20-APR-1993',28,'F','C','ASSEMBLY',2600),
('REVATHI','02-DEC-1969','2-JAN-1992',33,'F','PASCAL','BASIC',2700),
('VIJAY','14-DEC-1965','2-MAY-1992',29,'M','FOXPRO','C',2500);
GO
INSERT INTO STUDIES VALUES
('ANAND','SABHARI','PGDCA',4500),
('ALTAF','COIT','DCA',7200),
('JULIANA','BDPS','MCA',22000),
('KAMALA','PRAGATHI','DCA',5000),
('MARY','SABHARI','PGDCA',4500),
('NELSON','PRAGATHI','DAP',6200),
('PATRICK','PRAGATHI','DCAP',5200),
('QADIR','APPLE','HDCA',14000),
('RAMESH','SABHARI','PGDCA',4500),
('REBECCA','BROLLIANT','DCAP',11000),
('REMITHA','BDPS','DCS',6000),
('RECATHI','SABHARI','DAP',5000),
('VIJAY','BDPS','DCA',48000);
GO
QUERIES
--1. FIND OUT THE SELLING COST AVERAGE FOR PACKAGES DEVELOPED IN PASCAL.
SELECT AVG(SELLINGCOST) AS AVERAGESELLINGCOST
FROM SOFTWARE
WHERE DEVELOPMENTLANGUAGE = 'PASCAL'
--2. DISPLAY THE NAMES AND AGES OF ALL PROGRAMMERS.
SELECT NAME, AGE
FROM PROGRAMMER
--3. DISPLAY THE NAMES OF THOSE WHO HAVE DONE THE DAP COURSE.
SELECT NAME
FROM STUDIES
WHERE COURSE = 'DAP'
--4. DISPLAY THE NAMES AND DATE OF BIRTH OF ALL PROGRAMMERS BORN IN JANUARY.
SELECT NAME, DATEOFBIRTH
FROM PROGRAMMER
WHERE MONTH(DATEOFBIRTH) = 1
--5. WHAT IS THE HIGHEST NUMBER OF COPIES SOLD BY A PACKAGE?
SELECT MAX(COPIESSOLD) AS HIGHESTCOPIESSOLD
FROM SOFTWARE
--6. DISPLAY LOWEST COURSE FEE.
SELECT MIN(COURSEFEE) AS LOWESTCOURSEFEE
FROM STUDIES
--7. HOW MANY PROGRAMMERS HAVE DONE THE PGDCA COURSE?
SELECT COUNT(*) AS NUMBEROFPROGRAMMERS
FROM STUDIES
WHERE COURSE = 'PGDCA'
--8. HOW MUCH REVENUE HAS BEEN EARNED THROUGH SALES OF PACKAGES DEVELOPED IN C?
SELECT SUM(SELLINGCOST) AS TOTALREVENUE
FROM SOFTWARE
WHERE DEVELOPMENTLANGUAGE = 'C'
--9. DISPLAY THE DETAILS OF THE SOFTWARE DEVELOPED BY RAMESH.
SELECT *
FROM SOFTWARE
WHERE DEVELOPER = 'RAMESH'
--10. HOW MANY PROGRAMMERS STUDIED AT SABHARI?
SELECT COUNT(*) AS NUMBEROFPROGRAMMERS
FROM STUDIES
WHERE INSTITUTE = 'SABHARI'
--11. DISPLAY DETAILS OF PACKAGES WHOSE SALES CROSSED THE 2000 MARK.
SELECT *
FROM SOFTWARE
WHERE COPIESSOLD > 2000
--12. DISPLAY THE DETAILS OF PACKAGES FOR WHICH DEVELOPMENT COSTS HAVE BEEN RECOVERED.
SELECT *
FROM SOFTWARE
WHERE DEVELOPMENTCOST <= SELLINGCOST
--13. WHAT IS THE COST OF THE COSTLIEST SOFTWARE DEVELOPMENT IN BASIC?
SELECT *
FROM SOFTWARE
WHERE DEVELOPMENTCOST <= SELLINGCOST
--14. HOW MANY PACKAGES HAVE BEEN DEVELOPED IN DBASE?
SELECT COUNT(*) AS NUMBEROFPACKAGES
FROM SOFTWARE
WHERE DEVELOPMENTLANGUAGE = 'DBASE'
--15. HOW MANY PROGRAMMERS STUDIED IN PRAGATHI?
SELECT COUNT(*) AS NUMBEROFPROGRAMMERS
FROM STUDIES
WHERE INSTITUTE = 'PRAGATHI'
--16. HOW MANY PROGRAMMERS PAID 5000 TO 10000 FOR THEIR COURSE?
SELECT COUNT(*) AS NUMBEROFPROGRAMMERS
FROM STUDIES
WHERE COURSEFEE BETWEEN 5000 AND 10000
--17. WHAT IS THE AVERAGE COURSE FEE?
SELECT AVG(COURSEFEE) AS AVERAGECOURSEFEE
FROM STUDIES
--18. DISPLAY THE DETAILS OF THE PROGRAMMERS KNOWING C.
SELECT *
FROM PROGRAMMER
WHERE LANGUAGES LIKE '%C%'
--19. HOW MANY PROGRAMMERS KNOW EITHER COBOL OR PASCAL?
SELECT COUNT(*) AS NUMBEROFPROGRAMMERS
FROM PROGRAMMER
WHERE LANGUAGES LIKE '%COBOL%' OR LANGUAGES LIKE '%PASCAL%'
--20. HOW MANY PROGRAMMERS DON’T KNOW PASCAL AND C?
SELECT COUNT(*) AS NUMBEROFPROGRAMMERS
FROM PROGRAMMER
WHERE LANGUAGES NOT LIKE '%PASCAL%' AND LANGUAGES NOT LIKE '%C%'
--21. HOW OLD IS THE OLDEST MALE PROGRAMMER?
SELECT MAX(AGE) AS OLDESTMALEPROGRAMMERAGE
FROM PROGRAMMER
WHERE GENDER = 'MALE'
--22. WHAT IS THE AVERAGE AGE OF FEMALE PROGRAMMERS?
SELECT AVG(AGE) AS AVERAGEFEMALEPROGRAMMERAGE
FROM PROGRAMMER
WHERE GENDER = 'FEMALE'
--24. WHO ARE THE PROGRAMMERS WHO CELEBRATE THEIR BIRTHDAYS DURING THE CURRENT MONTH?
SELECT NAME
FROM PROGRAMMER
WHERE MONTH(DATEOFBIRTH) = MONTH(GETDATE())
--25. HOW MANY FEMALE PROGRAMMERS ARE THERE?
SELECT COUNT(*) AS NUMBEROFFEMALEPROGRAMMERS
FROM PROGRAMMER
WHERE GENDER = 'FEMALE'
--26. WHAT ARE THE LANGUAGES STUDIED BY MALE PROGRAMMERS?SELECT AVG(SELLINGCOST) AS AVERAGESELLINGCOST
SELECT DISTINCT LANGUAGES
FROM PROGRAMMER
WHERE GENDER = 'MALE'
--27. WHAT IS THE AVERAGE SALARY?
SELECT AVG(SALARY) AS AVERAGESALARY
FROM PROGRAMMER
--28. HOW MANY PEOPLE DRAW A SALARY BETWEEN 2000 TO 4000?
SELECT COUNT(*) AS NUMBEROFPEOPLE
FROM PROGRAMMER
WHERE SALARY BETWEEN 2000 AND 4000
--29. DISPLAY THE DETAILS OF THOSE WHO DON’T KNOW CLIPPER, COBOL OR PASCAL
SELECT *
FROM PROGRAMMER
WHERE LANGUAGES NOT LIKE '%CLIPPER%' AND LANGUAGES NOT LIKE '%COBOL%' AND LANGUAGES 
NOT LIKE '%PASCAL%'
--30. DISPLAY THE COST OF PACKAGES DEVELOPED BY EACH PROGRAMMER.
SELECT P.NAME, S.DEVELOPMENTCOST
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
--31. DISPLAY THE SALES VALUE OF THE PACKAGES DEVELOPED BY EACH PROGRAMMER.
SELECT P.NAME, S.SELLINGCOST * S.COPIESSOLD AS SALESVALUE
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
--32. DISPLAY THE NUMBER OF PACKAGES SOLD BY EACH PROGRAMMER.
SELECT P.NAME, S.COPIESSOLD AS PACKAGESSOLD
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
--33. DISPLAY THE SALES COST OF THE PACKAGES DEVELOPED BY EACH PROGRAMMER LANGUAGE WISE.
SELECT P.NAME, S.DEVELOPMENTLANGUAGE, SUM(S.SELLINGCOST) AS TOTALSALESCOST
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
GROUP BY P.NAME, S.DEVELOPMENTLANGUAGE
--34. DISPLAY EACH LANGUAGE NAME WITH THE AVERAGE DEVELOPMENT COST, AVERAGE SELLING COST AND AVERAGE PRICE PER COPY.
SELECT DEVELOPMENTLANGUAGE, AVG(DEVELOPMENTCOST) AS AVGDEVELOPMENTCOST, 
AVG(SELLINGCOST) AS AVGSELLINGCOST, AVG(SELLINGCOST / COPIESSOLD) AS AVGPRICEPERCOPY
FROM SOFTWARE
GROUP BY DEVELOPMENTLANGUAGE
--35. DISPLAY EACH PROGRAMMER’S NAME AND THE COSTLIEST AND CHEAPEST PACKAGES DEVELOPED BY HIM OR HER.
SELECT P.NAME, MAX(S.DEVELOPMENTCOST) AS COSTLIESTPACKAGE, MIN(S.DEVELOPMENTCOST) AS 
CHEAPESTPACKAGE
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
GROUP BY P.NAME
--36. DISPLAY EACH INSTITUTE’S NAME WITH THE NUMBER OF COURSES AND THE AVERAGE COST PER COURSE.
SELECT INSTITUTE, COUNT(*) AS NUMBEROFCOURSES, AVG(COURSEFEE) AS AVGCOSTPERCOURSE
FROM STUDIES
GROUP BY INSTITUTE
--37. DISPLAY EACH INSTITUTE’S NAME WITH THE NUMBER OF STUDENTS.
SELECT INSTITUTE, COUNT(*) AS NUMBEROFSTUDENTS
FROM STUDIES
GROUP BY INSTITUTE
--38. DISPLAY NAMES OF MALE AND FEMALE PROGRAMMERS ALONG WITH THEIR GENDER.
SELECT NAME, GENDER
FROM PROGRAMMER
--39. DISPLAY THE NAME OF PROGRAMMERS AND THEIR PACKAGES.
SELECT P.NAME, S.PACKAGENAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
--40. DISPLAY THE NUMBER OF PACKAGES IN EACH LANGUAGE EXCEPT C AND C++.
SELECT DEVELOPMENTLANGUAGE, COUNT(*) AS NUMBEROFPACKAGES
FROM SOFTWARE
WHERE DEVELOPMENTLANGUAGE NOT IN ('C', 'C++')
GROUP BY DEVELOPMENTLANGUAGE
--41. DISPLAY THE NUMBER OF PACKAGES IN EACH LANGUAGE FOR WHICH DEVELOPMENT COST IS LESS THAN 1000.
SELECT DEVELOPMENTLANGUAGE, COUNT(*) AS NUMBEROFPACKAGES
FROM SOFTWARE
WHERE DEVELOPMENTCOST < 1000
GROUP BY DEVELOPMENTLANGUAGE
--42. DISPLAY THE AVERAGE DIFFERENCE BETWEEN SCOST AND DCOST FOR EACH PACKAGE.
SELECT PACKAGENAME, AVG(SELLINGCOST - DEVELOPMENTCOST) AS AVGDIFFERENCE
FROM SOFTWARE
GROUP BY PACKAGENAME
--43. DISPLAY THE TOTAL SCOST, DCOST AND THE AMOUNT TO BE RECOVERED FOR EACH PROGRAMMER WHOSE COST HAS NOT YET BEEN RECOVERED.
SELECT P.NAME, SUM(S.SELLINGCOST) AS TOTALSALESCOST, SUM(S.DEVELOPMENTCOST) AS 
TOTALDEVELOPMENTCOST, SUM(S.SELLINGCOST - S.DEVELOPMENTCOST) AS 
AMOUNTTOBERECOVERED
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
GROUP BY P.NAME
HAVING SUM(S.SELLINGCOST) < SUM(S.DEVELOPMENTCOST)
--44. DISPLAY THE HIGHEST, LOWEST AND AVERAGE SALARIES FOR THOSE EARNING MORE THAN 2000.
SELECT MAX(SALARY) AS HIGHESTSALARY, MIN(SALARY) AS LOWESTSALARY, AVG(SALARY) AS 
AVERAGESALARY
FROM PROGRAMMER
WHERE SALARY > 2000
--45. WHO IS THE HIGHEST PAID C PROGRAMMER?
SELECT P.NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.DEVELOPMENTLANGUAGE = 'C'
ORDER BY P.SALARY DESC
--46. WHO IS THE HIGHEST PAID FEMALE COBOL PROGRAMMER?
SELECT P.NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE P.GENDER = 'FEMALE' AND S.DEVELOPMENTLANGUAGE = 'COBOL'
ORDER BY P.SALARY DESC
--47. DISPLAY THE NAMES OF THE HIGHEST PAID PROGRAMMERS FOR EACH LANGUAGE.
SELECT NAME FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE P.GENDER = 'FEMALE' AND S.DEVELOPMENTLANGUAGE = 'COBOL'
ORDER BY P.SALARY DESC
--48. WHO IS THE LEAST EXPERIENCED PROGRAMMER?
SELECT S.PNAME FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE P.GENDER = 'FEMALE' AND S.DEVELOPMENTLANGUAGE = 'COBOL'
ORDER BY P.SALARY DESC
--49. WHO IS THE MOST EXPERIENCED MALE PROGRAMMER KNOWING PASCAL?
SELECT P.NAME
FROM PROGRAMMER P
JOIN STUDIES S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE P.GENDER = 'MALE' AND S.COURSE = 'PASCAL'
ORDER BY P.JOININGDATE ASC
--50. WHICH LANGUAGE IS KNOWN BY ONLY ONE PROGRAMMER?
SELECT DEVELOPMENTLANGUAGE
FROM SOFTWARE
GROUP BY DEVELOPMENTLANGUAGE
HAVING COUNT(*) = 1
--51. WHO IS THE ABOVE PROGRAMMER REFERRED IN 50?
SELECT P.NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.DEVELOPMENTLANGUAGE = (
 SELECT DEVELOPMENTLANGUAGE
 FROM SOFTWARE
 GROUP BY DEVELOPMENTLANGUAGE
 HAVING COUNT(*) = 1
)
--52. WHO IS THE YOUNGEST PROGRAMMER KNOWING DBASE?
SELECT P.NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.DEVELOPMENTLANGUAGE = 'DBASE'
ORDER BY P.AGE ASC
--53. WHICH FEMALE PROGRAMMER EARNING MORE THAN 3000 DOES NOT KNOW C, C++, ORACLE OR DBASE?
SELECT NAME
FROM PROGRAMMER
WHERE GENDER = 'FEMALE'
 AND SALARY > 3000
 AND LANGUAGES NOT LIKE '%C%'
 AND LANGUAGES NOT LIKE '%C++%'
 AND LANGUAGES NOT LIKE '%ORACLE%'
 AND LANGUAGES NOT LIKE '%DBASE%'
--54. WHICH INSTITUTE HAS THE MOST NUMBER OF STUDENTS?
SELECT INSTITUTE, COUNT(*) AS NUMBEROFSTUDENTS
FROM STUDIES
GROUP BY INSTITUTE
ORDER BY NUMBEROFSTUDENTS DESC
--55. WHAT IS THE COSTLIEST COURSE?
SELECT COURSE
FROM STUDIES
ORDER BY COURSEFEE DESC
--56. WHICH COURSE HAS BEEN DONE BY THE MOST NUMBER OF STUDENTS?
SELECT COURSE
FROM STUDIES
GROUP BY COURSE
ORDER BY COUNT(*) DESC
--57. WHICH INSTITUTE CONDUCTS THE COSTLIEST COURSE?SELECT P.NAME
SELECT INSTITUTE
FROM STUDIES
WHERE COURSEFEE = (
 SELECT MAX(COURSEFEE)
 FROM STUDIES
)
--58. DISPLAY THE NAME OF THE INSTITUTE AND THE COURSE WHICH HAS BELOW AVERAGE COURSE FEE.
SELECT INSTITUTE, COURSE
FROM STUDIES
WHERE COURSEFEE < (
 SELECT AVG(COURSEFEE)
 FROM STUDIES
)
--59. DISPLAY THE NAMES OF THE COURSES WHOSE FEES ARE WITHIN 1000 (+ OR -) OF THE AVERAGE FEE.
SELECT INSTITUTE, COURSE
FROM STUDIES
WHERE COURSEFEE < (
 SELECT AVG(COURSEFEE)
 FROM STUDIES
)
--60. WHICH PACKAGE HAS THE HIGHEST DEVELOPMENT COST?
SELECT PACKAGENAME
FROM SOFTWARE
WHERE DEVELOPMENTCOST = (
 SELECT MAX(DEVELOPMENTCOST)
 FROM SOFTWARE
)
--61. WHICH COURSE HAS BELOW AVERAGE NUMBER OF STUDENTS?
SELECT COURSE
FROM STUDIES
GROUP BY COURSE
HAVING COUNT(*) < (
 SELECT AVG(STUDENTCOUNT)
 FROM (
 SELECT COUNT(*) AS STUDENTCOUNT
 FROM STUDIES
 GROUP BY COURSE
 ) AS SUBQUERY
)
--62. WHICH PACKAGE HAS THE LOWEST SELLING COST?
SELECT PACKAGENAME
FROM SOFTWARE
WHERE SELLINGCOST = (
 SELECT MIN(SELLINGCOST)
 FROM SOFTWARE
)
--63. WHO DEVELOPED --THE PACKAGE THAT HAS SOLD THE LEAST NUMBER OF COPIES?
SELECT P.NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE COPIESSOLD = (
 SELECT MIN(COPIESSOLD)
 FROM SOFTWARE
)
--64. WHICH LANGUAGE HAS BEEN USED TO DEVELOP THE PACKAGE WHICH HAS THE HIGHEST SALES AMOUNT?
SELECT DEVELOPMENTLANGUAGE
FROM SOFTWARE
WHERE SELLINGCOST * COPIESSOLD = (
 SELECT MAX(SELLINGCOST * COPIESSOLD)
 FROM SOFTWARE
)
--65. HOW MANY COPIES OF THE PACKAGE THAT HAS THE LEAST DIFFERENCE BETWEEN DEVELOPMENT AND SELLING COST WERE SOLD?
SELECT DEVELOPMENTLANGUAGE
FROM SOFTWARE
WHERE SELLINGCOST * COPIESSOLD = (
 SELECT MAX(SELLINGCOST * COPIESSOLD)
 FROM SOFTWARE
)
--66. WHICH IS THE COSTLIEST PACKAGE DEVELOPED IN PASCAL?
SELECT PACKAGENAME
FROM SOFTWARE
WHERE DEVELOPMENTLANGUAGE = 'PASCAL'
ORDER BY DEVELOPMENTCOST DESC
--67. WHICH LANGUAGE WAS USED TO DEVELOP THE MOST NUMBER OF PACKAGES?
SELECT DEVELOPMENTLANGUAGE
FROM SOFTWARE
GROUP BY DEVELOPMENTLANGUAGE
ORDER BY COUNT(*) DESC
--68. WHICH PROGRAMMER HAS DEVELOPED THE HIGHEST NUMBER OF PACKAGES?
SELECT P.NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
GROUP BY P.NAME
ORDER BY COUNT(*) DESC
--69. WHO IS THE AUTHOR OF THE COSTLIEST PACKAGE?
SELECT P.NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.DEVELOPMENTCOST = (
 SELECT MAX(DEVELOPMENTCOST)
 FROM SOFTWARE
)
--70. DISPLAY THE NAMES OF THE PACKAGES WHICH HAVE SOLD LESS THAN THE AVERAGE NUMBER OF COPIES.
SELECT PACKAGENAME
FROM SOFTWARE
WHERE COPIESSOLD < (
 SELECT AVG(COPIESSOLD)
 FROM SOFTWARE
)
--71. WHO ARE THE AUTHORS OF THE PACKAGES WHICH HAVE RECOVERED MORE THAN DOUBLE THE DEVELOPMENT COST?
SELECT P.NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.SELLINGCOST >= 2 * S.DEVELOPMENTCOST
--72. DISPLAY THE PROGRAMMER NAMES AND THE CHEAPEST PACKAGES DEVELOPED BY THEM IN EACH LANGUAGE.
SELECT P.NAME, S.DEVELOPMENTLANGUAGE, S.PACKAGENAME, S.DEVELOPMENTCOST
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.DEVELOPMENTCOST = (
 SELECT MIN(DEVELOPMENTCOST)
 FROM SOFTWARE
 WHERE PROGRAMMERID = P.PROGRAMMERID
 GROUP BY DEVELOPMENTLANGUAGE
)
--74. WHO IS THE YOUNGEST MALE PROGRAMMER BORN IN 1965?
SELECT NAME
FROM PROGRAMMER
WHERE GENDER = 'FEMALE' AND YEAR(JOININGDATE) = 1992
ORDER BY DATEOFBIRTH ASC
--75. WHO IS THE OLDEST FEMALE PROGRAMMER WHO JOINED IN 1992?
SELECT YEAR(DATEOFBIRTH) AS BIRTHYEAR, COUNT(*) AS NUMBEROFPROGRAMMERS
FROM PROGRAMMER
GROUP BY BIRTHYEAR
ORDER BY NUMBEROFPROGRAMMERS DESC
--76. IN WHICH YEAR WAS THE MOST NUMBER OF PROGRAMMERS BORN?
SELECT MONTH(JOININGDATE) AS JOININGMONTH, COUNT(*) AS NUMBEROFPROGRAMMERS
FROM PROGRAMMER
GROUP BY JOININGMONTH
ORDER BY NUMBEROFPROGRAMMERS DESC
--77. IN WHICH MONTH DID THE MOST NUMBER OF PROGRAMMERS JOIN?
SELECT MONTH(JOININGDATE) AS JOININGMONTH, COUNT(*) AS NUMBEROFPROGRAMMERS
FROM PROGRAMMER
GROUP BY JOININGMONTH
ORDER BY NUMBEROFPROGRAMMERS DESC
--78. IN WHICH LANGUAGE ARE MOST OF THE PROGRAMMER’S PROFICIENT?
SELECT LANGUAGES
FROM PROGRAMMER
GROUP BY LANGUAGES
ORDER BY COUNT(*) DESC
--79. WHO ARE THE MALE PROGRAMMERS EARNING BELOW THE AVERAGE SALARY OF FEMALE PROGRAMMERS?
SELECT NAME
FROM PROGRAMMER
WHERE GENDER = 'MALE' AND SALARY < (
 SELECT AVG(SALARY)
 FROM PROGRAMMER
 WHERE GENDER = 'FEMALE'
)
--80. WHO ARE THE FEMALE PROGRAMMERS EARNING MORE THAN THE HIGHEST PAID?
SELECT NAME
FROM PROGRAMMER
WHERE GENDER = 'FEMALE' AND SALARY > (
 SELECT MAX(SALARY)
 FROM PROGRAMMER
)
--81. WHICH LANGUAGE HAS BEEN STATED AS THE PROFICIENCY BY MOST OF THE PROGRAMMERS?
SELECT PROFICIENCY
FROM (
 SELECT PROF1 AS PROFICIENCY
 FROM PROGRAMMER
 UNION ALL
 SELECT PROF2 AS PROFICIENCY
 FROM PROGRAMMER
) AS SUBQUERY
GROUP BY PROFICIENCY
ORDER BY COUNT(*) DESC
--82. DISPLAY THE DETAILS OF THOSE WHO ARE DRAWING THE SAME SALARY.
SELECT P1.NAME, P2.NAME, P1.SALARY
FROM PROGRAMMER P1
JOIN PROGRAMMER P2 ON P1.SALARY = P2.SALARY AND P1.PROGRAMMERID <> 
P2.PROGRAMMERID
--83. DISPLAY THE DETAILS OF THE SOFTWARE DEVELOPED BY THE MALE PROGRAMMERS EARNING MORE THAN 3000.
SELECT S.*
FROM SOFTWARE S
JOIN PROGRAMMER P ON S.PROGRAMMERID = P.PROGRAMMERID
WHERE P.GENDER = 'MALE' AND P.SALARY > 3000
--84. DISPLAY THE DETAILS OF THE PACKAGES DEVELOPED IN PASCAL BY THE FEMALE PROGRAMMERS.
SELECT S.*
FROM SOFTWARE S
JOIN PROGRAMMER P ON S.PROGRAMMERID = P.PROGRAMMERID
WHERE P.GENDER = 'FEMALE' AND S.DEVELOPMENTLANGUAGE = 'PASCAL'
--85. DISPLAY THE DETAILS OF THE PROGRAMMERS WHO JOINED BEFORE 1990.
SELECT *
FROM PROGRAMMER
WHERE YEAR(JOININGDATE) < 1990
--86. DISPLAY THE DETAILS OF THE SOFTWARE DEVELOPED IN C BY THE FEMALE PROGRAMMERS AT PRAGATHI.
SELECT S.*
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE P.GENDER = 'FEMALE' AND P.INSTITUTE = 'PRAGATHI' AND S.DEVELOPMENTLANGUAGE = 'C'
--87. DISPLAY THE NUMBER OF PACKAGES, NUMBER OF COPIES SOLD AND SALES VALUE OF EACH PROGRAMMER INSTITUTE WISE.
SELECT P.INSTITUTE, COUNT(S.PACKAGENAME) AS NUMBEROFPACKAGES, SUM(S.COPIESSOLD) AS 
TOTALCOPIESSOLD, SUM(S.SELLINGCOST * S.COPIESSOLD) AS TOTALSALESVALUE
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
GROUP BY P.INSTITUTE
--89. DISPLAY THE DETAILS OF THE SOFTWARE DEVELOPED BY THE MALE PROGRAMMERS BORN BEFORE 1965 AND FEMALE PROGRAMMERS BORN AFTER 1975.
SELECT S.*
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE (P.GENDER = 'MALE' AND YEAR(P.DATEOFBIRTH) < 1965) OR (P.GENDER = 'FEMALE' AND 
YEAR(P.DATEOFBIRTH) > 1975)
--90. DISPLAY THE DETAILS OF THE SOFTWARE THAT HAS BEEN DEVELOPED IN THE LANGUAGE WHICH IS NEITHER THE FIRST NOR THE SECOND PROFICIENCY OF THEPROGRAMMERS.
SELECT S.*
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.DEVELOPMENTLANGUAGE NOT IN (P.PROF1, P.PROF2)
--91. DISPLAY THE DETAILS OF THE SOFTWARE DEVELOPED BY THE MALE STUDENTS ATSABHARI.
SELECT S.*
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE P.GENDER = 'MALE' AND P.INSTITUTE = 'SABHARI'
--92. DISPLAY THE NAMES OF THE PROGRAMMERS WHO HAVE NOT DEVELOPED ANYPACKAGES.
SELECT NAME
FROM PROGRAMMER
WHERE PROGRAMMERID NOT IN (SELECT DISTINCT PROGRAMMERID FROM SOFTWARE)
--93. WHAT IS THE TOTAL COST OF THE SOFTWARE DEVELOPED BY THE PROGRAMMERS OF APPLE?
SELECT SUM(DEVELOPMENTCOST) AS TOTALCOST
FROM SOFTWARE
WHERE PROGRAMMERID IN (SELECT PROGRAMMERID FROM PROGRAMMER WHERE INSTITUTE = 
'APPLE')
--94. WHO ARE THE PROGRAMMERS WHO JOINED ON THE SAME DAY?
SELECT P1.NAME, P2.NAME, P1.JOININGDATE
FROM PROGRAMMER P1
JOIN PROGRAMMER P2 ON P1.JOININGDATE = P2.JOININGDATE
WHERE P1.NAME <> P2.NAME
--95. WHO ARE THE PROGRAMMERS WHO HAVE THE SAME PROF2?
SELECT PROF2, COUNT(*) AS NUMBEROFPROGRAMMERS
FROM PROGRAMMER
GROUP BY PROF2
HAVING COUNT(*) > 1
--96. DISPLAY THE TOTAL SALES VALUE OF THE SOFTWARE INSTITUTE WISE.
SELECT P.INSTITUTE, SUM(S.SELLINGCOST * S.COPIESSOLD) AS TOTALSALESVALUE
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
GROUP BY P.INSTITUTE
--97. IN WHICH INSTITUTE DOES THE PERSON WHO DEVELOPED THE COSTLIEST PACKAGE STUDY?
SELECT P.INSTITUTE
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.DEVELOPMENTCOST = (
 SELECT MAX(DEVELOPMENTCOST)
 FROM SOFTWARE
)
--98. WHICH LANGUAGE LISTED IN PROF1, PROF2 HAS NOT BEEN USED TO DEVELOP ANY PACKAGE?
SELECT DISTINCT PROF1, PROF2
FROM PROGRAMMER
WHERE PROF1 NOT IN (
 SELECT DISTINCT DEVELOPMENTLANGUAGE
 FROM SOFTWARE
)
 OR PROF2 NOT IN (
 SELECT DISTINCT DEVELOPMENTLANGUAGE
 FROM SOFTWARE
)
--99. HOW MUCH DOES THE PERSON WHO DEVELOPED THE HIGHEST SELLING PACKAGE EARN AND WHAT COURSE DID HE/SHE UNDERGO?
SELECT P.NAME, P.SALARY, S.PACKAGENAME, S.SELLINGCOST * S.COPIESSOLD AS TOTALSALESVALUE, ST.COURSE
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
JOIN STUDIES ST ON P.PROGRAMMERID = ST.PROGRAMMERID
WHERE S.SELLINGCOST * S.COPIESSOLD = (
 SELECT MAX(SELLINGCOST * COPIESSOLD)
 FROM SOFTWARE
)
--100. WHAT IS THE AVERAGE SALARY FOR THOSE WHOSE SOFTWARE SALES IS MORE THAN 50000
SELECT AVG(P.SALARY) AS AVERAGESALARY
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
WHERE S.SELLINGCOST * S.COPIESSOLD > 50000
--101. HOW MANY PACKAGES WERE DEVELOPED BY STUDENTS WHO STUDIED IN INSTITUTES THAT CHARGE THE LOWEST COURSE FEE?
SELECT COUNT(*) AS NUMBEROFPACKAGES
FROM SOFTWARE
WHERE PROGRAMMERID IN (
 SELECT DISTINCT PROGRAMMERID
 FROM STUDIES
 WHERE COURSEFEE = (
 SELECT MIN(COURSEFEE)
 FROM STUDIES
 )
)
--102. HOW MANY PACKAGES WERE DEVELOPED BY THE PERSON WHO DEVELOPED THE CHEAPEST PACKAGE? WHERE DID HE/SHE STUDY?
SELECT COUNT(*) AS NUMBEROFPACKAGES, P.INSTITUTE
FROM SOFTWARE S
JOIN PROGRAMMER P ON S.PROGRAMMERID = P.PROGRAMMERID
WHERE S.DEVELOPMENTCOST = (
 SELECT MIN(DEVELOPMENTCOST)
 FROM SOFTWARE
)
GROUP BY P.INSTITUTE
--103. HOW MANY PACKAGES WERE DEVELOPED BY FEMALE PROGRAMMERS EARNING MORE THAN THE HIGHEST PAID MALE PROGRAMMER?
SELECT COUNT(*) AS NUMBEROFPACKAGES
FROM SOFTWARE
WHERE PROGRAMMERID IN (
 SELECT P.PROGRAMMERID
 FROM PROGRAMMER P
 WHERE P.GENDER = 'FEMALE' AND P.SALARY > (
 SELECT MAX(SALARY)
 FROM PROGRAMMER
 WHERE GENDER = 'MALE'
 )
)
--105. LIST THE PROGRAMMERS (FROM THE SOFTWARE TABLE) AND THE INSTITUTES THEY STUDIED AT.
SELECT P.NAME, P.INSTITUTE
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
--106. LIST EACH PROF WITH THE NUMBER OF PROGRAMMERS HAVING THAT PROF AND THE NUMBER OF THE PACKAGES IN THAT PROF.
SELECT PROF, COUNT(DISTINCT PROGRAMMERID) AS NUMBEROFPROGRAMMERS, COUNT(*) AS 
NUMBEROFPACKAGES
FROM PROGRAMMER
GROUP BY PROF
--107. LIST THE PROGRAMMER NAMES (FROM THE PROGRAMMER TABLE) AND THE NUMBER OF PACKAGES EACH HAS DEVELOPED
SELECT P.NAME, COUNT(*) AS NUMBEROFPACKAGES
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMERID = S.PROGRAMMERID
GROUP BY P.NAME
--*NOTE: I CONSIDER THE SOME OF THE COLUMN ASSUMED TO BE THERE IN THE TABLE BECAUSE THE DATA PROVIDED IS NOT ENOUGH.